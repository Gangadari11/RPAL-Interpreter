Example: Understanding RPAL Lexical Analyzer (Lexer)

===================================================
Input RPAL Code (from input file):
---------------------------------------------------
let x = 10 in x + 20;

---------------------------------------------------

Step-by-Step Tokenization:

1. Read the file as one string:
   "let x = 10 in x + 20;"

2. The lexer applies regex patterns from the token_patterns dictionary in order.
   It checks from left to right, matching the longest possible patterns.

---------------------------------------------------

Tokens Identified:

Token 1:  "let"
  → Matches the KEYWORD pattern.
  → Token: <KEYWORD, 'let'>

Token 2:  "x"
  → Matches the IDENTIFIER pattern.
  → Token: <IDENTIFIER, 'x'>

Token 3:  "="
  → Matches the OPERATOR pattern.
  → Token: <OPERATOR, '='>

Token 4:  "10"
  → Matches the INTEGER pattern.
  → Token: <INTEGER, '10'>

Token 5:  "in"
  → Matches the KEYWORD pattern.
  → Token: <KEYWORD, 'in'>

Token 6:  "x"
  → Matches the IDENTIFIER pattern.
  → Token: <IDENTIFIER, 'x'>

Token 7:  "+"
  → Matches the OPERATOR pattern.
  → Token: <OPERATOR, '+'>

Token 8:  "20"
  → Matches the INTEGER pattern.
  → Token: <INTEGER, '20'>

Token 9:  ";"
  → Matches the PUNCTUATION pattern.
  → Token: <PUNCTUATION, ';'>

---------------------------------------------------

Final Output:

<KEYWORD, 'let'>
<IDENTIFIER, 'x'>
<OPERATOR, '='>
<INTEGER, '10'>
<KEYWORD, 'in'>
<IDENTIFIER, 'x'>
<OPERATOR, '+'>
<INTEGER, '20'>
<PUNCTUATION, ';'>

---------------------------------------------------

Notes:
- Comments and whitespace are ignored by the lexer.
- The lexer reads the string from left to right, matching one token at a time.
- Each token is represented by its type and value.

===================================================

This file demonstrates how your RPAL lexer turns source code into tokens using defined lexical rules.
